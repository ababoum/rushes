#!yasl

#!
//"Image received, nb pixels : " print 1:= print "\n" print
//"Found square : " print "\n" print
//"\e[48;2;255;0;0m\e[0m"
	// TODO: check \n\n in file

{1 +} increment
{1 -} decrement
{
	=
	9:=
	!=
} is_not_index
{
	"=/+9876543210zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA" ][:9 9:=:8 9:!
	0:1
	is_not_index
	@ (
		1:increment:1
		1:= 8:= <= ? (8:=:9 9:!^:9 is_not_index) : 0
	)
	8:= #(9:!) 8:!
	1:= 1:! =:1 ! ! 1:= 1:!
} get_index

{
	= 1 >
	@ (
		= 1 &:6
		= 1 >>
		= 1 >
	)
	= 1 &:6
	6:(
		(# 6 !=)
		@(
			0
			(# 6 !=)
		)
		"" # 1 - #+
		][
		"":7
		#(=:7 !)
		"":7
		7:# 1 - = #(7:+:7) !
	):6
	7:= 7:!
} dec_to_bin

{
	2:= 2 /:2 // store the half value of parameter as starting point
	2:=:3
	2:!
	1:4
	// 2: = print " stack 2\n" print:2
	// 3: = print " stack 3\n" print:3
	4:@(
		3:=:3
		3:=:3
		3:*:3
		2:=:3
		3:==:3 3:? (0:4) : (1:4 1:3 3:-:3)
	)
} sqrt // compute a square root. Return 0 if input is not perfect square

0:9
read
%@ (
	=:9 9:+:9 !
	][ =
	#(
		# ^ 
		get_index = 64 < ? (
			dec_to_bin =:2
		): !
	)
	read
)
=:9 9:+:9 !

9:= 9:!
0 %> ? "Image received, nb pixels: " print !  4 / = print "\n" print
=:2 ! "Found square: " print sqrt 3:=:3 3:print "\n" print 2:!


2:(# 1 - #(+)):2
# #! 2:= 2:!

[#] 8 /:9
0:1
9:= #(
	"":2
	8 #(
		= 1:= ]#[
		=:2 !
		//1:= 7 != ? (2:+:2) : ()
		2:+:2
		1:increment:1
	)
)
1:! ! 2:# #(2:= 2:!)
// ==========================================



// stack 0 used to store characters
// stack 1 used to 
// stack 2 used for sqrt
// stack 3 is used for iterating on sqrt, and storing the final value of sqrt
// stack 4 is used to control the sqrt iteration loop


//][:1 // explode stack into temp stack
//1:#(
//	1:=:0
//	1:!
//) // transfer back characters to initial stack


// stack 0 with 8 characers 0 or 1
	// Stack 2 to work on the conversion of each bin
	// stack 4 to store the exponent of 2
	// Stack 5 to store the result
	// Stack 6 to explode
{
	0:=:2 0:! // take 1 bin to convert
	2:][:6 // explode it
	6:#(
		6:=:2
		6:!
	) // put back all characters in a work stack (2) in the right order
	2:#:2
	128:4 // start exponent on power 1
	0:5 // start result on 0
	2:#(
		"0":2
		2:==:2 2:? (2:4 4:/:4) : (4:=:5 5:+:5 2:4 4:/:4)
	)
} bin_to_dec // takes bin in 8 chars from stack 0 and populates stack 5 
			// with the list of int 0 to 255 


// stack 7 to control loop on stack 5
{
	// 5:#:5
	// 3:5
	// 5:/:5
	// 5:=:7 5:!
	// 7:%@(
		"\e[48;2;":6
		0:=:6 0:!
		";":6
		6:+:6 6:+:6
		0:=:6 0:!
		";":6
		6:+:6 6:+:6
		0:=:6 0:!
		"m  \e[0m":6
		6:+:6 6:+:6
		// 1:7 7:-:7
		6:print
	// )
	// 7:!
} three_ints_to_pixel // takes ints from stack 5 and populates stack 6 with pixels 

// stack 8 as control for pix to square
{
	5:# #(5:=:0 5:!)
	3:=:8 // copy the square to stack 8
	8:=:8
	8:#(
		8:=:8
		8:#(
			three_ints_to_pixel
		)
		"\n":0 0:print
	)

} pixels_to_square


//# #! // empty stack 0
//2:#:2 2:#! // empty stack 2

//"11111111"
//"00000000"
//"00000000"
////red
//"11111111"
//"00000000"
//"00000000"
////red
//"00000000"
//"00000000"
//"11111111"
//// blue
//"00000000"
//"00000000"
//"11111111"
//// blue

# #(
	bin_to_dec
)
//(bin_to_dec
//bin_to_dec
//bin_to_dec
//bin_to_dec
//bin_to_dec
//bin_to_dec
//bin_to_dec
//bin_to_dec
//bin_to_dec
//bin_to_dec
//bin_to_dec
//bin_to_dec)
// int_to_pixels
pixels_to_square
